

for Inorder -
    we'll move to teh left node first then teh rootnode and then the right node
    if root:
        stack.append(root)
        root = root.left # here we moved to the left first cause its inorder traversal (Left-Root-Right)
    else:
    node = stack.pop() # we got the root that we just put into the stack
    res.append(node.val) # here we actually added the value of hte node to another list
    root = node.right  # now we will go to the next level which is the right child of our current node



for Preorder - 
    in preorder we perform the operation RLR(Root, left, right)
    while stack or root:
        if root:
            stack.append(root) - firstly we append the root node in the stack 
            res.append(root.val) - since in preorder we use the rootnode value first
            root = root.left - then we do the Left node (Root-Left)
        else:
            node = stack.pop()
            root = node.right # after doing the left side we come back to the 
                            parent node and visit the right child 


for Postorder - 
    LEFT-RIGHT-Root
    if root:
        stack.append(root) - first append the root node into the list
        res.append(root.val)
        root= root.right - we move to the right node first
    else:
         node= stack.pop()
         root = node.left - then we move to the left subtree
    return [::-1] res - finally we reverse the result because postorder returns the nodes in a reversed order